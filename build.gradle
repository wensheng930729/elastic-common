apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'io.polyglotted'
version = '6.2.1'

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    commonUtilsVersion = '1.0.0'
    commonsCodecVersion = '1.11'
    elasticSearchVersion = '6.2.1'
    guavaVersion = '23.6-jre'
    hamcrestVersion = '1.3'
    hdrHistoVersion = '2.1.10'
    httpCoreVersion = '4.4.9'
    httpClientVersion = '4.5.5'
    httpClientAsyncVersion = '4.1.3'
    jacksonVersion = '2.9.4'
    jodaVersion = '2.9.9'
    jtsVersion = '1.13'
    junitVersion = '4.12'
    junitParamsVersion = '1.1.1'
    log4jVersion = '2.10.0'
    lombokVersion = '1.16.20'
    slf4jVersion = '1.7.25'
    snakeyamlVersion = '1.19'
    spatial4jVersion = '0.6'
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "commons-codec:commons-codec:${commonsCodecVersion}"
    compileOnly "joda-time:joda-time:${jodaVersion}"
    compileOnly "com.google.guava:guava:${guavaVersion}"
    compileOnly "org.hdrhistogram:HdrHistogram:${hdrHistoVersion}"

    compileOnly "org.slf4j:slf4j-api:${slf4jVersion}"
    compileOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    compileOnly("org.apache.logging.log4j:log4j-core:${log4jVersion}") {
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
    }
    compileOnly("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}") {
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
    }
    compileOnly "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compileOnly "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compileOnly("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
    }
    compileOnly("com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.google.guava", module: "guava"
    }
    compileOnly("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    }
    compileOnly("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "org.yaml", module: "snakeyaml"
    }
    compileOnly("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    }
    compileOnly "org.apache.httpcomponents:httpcore:${httpCoreVersion}"
    compileOnly("org.apache.httpcomponents:httpcore-nio:${httpCoreVersion}") {
        exclude group: "org.apache.httpcomponents", module: "httpcore"
    }
    compileOnly("org.apache.httpcomponents:httpclient:${httpClientVersion}") {
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "commons-codec", module: "commons-codec"
        exclude group: "org.apache.httpcomponents", module: "httpcore"
    }
    compileOnly("org.apache.httpcomponents:httpasyncclient:${httpClientAsyncVersion}") {
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.apache.httpcomponents", module: "httpcore"
        exclude group: "org.apache.httpcomponents", module: "httpcore-nio"
        exclude group: "org.apache.httpcomponents", module: "httpclient"
    }
    compileOnly "io.polyglotted:common-utils:${commonUtilsVersion}"

    compile "org.locationtech.spatial4j:spatial4j:${spatial4jVersion}"
    compile "com.vividsolutions:jts:${jtsVersion}"
    compile("org.elasticsearch:elasticsearch:${elasticSearchVersion}") {
        exclude group: "joda-time", module: "joda-time"
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-smile"
        exclude group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-yaml"
        exclude group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-cbor"
        exclude group: "org.yaml", module: "snakeyaml"
        exclude group: "org.hdrhistogram", module: "HdrHistogram"
    }
    compile("org.elasticsearch.client:elasticsearch-rest-client:${elasticSearchVersion}") {
        exclude group: "commons-codec", module: "commons-codec"
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.apache.httpcomponents", module: "httpcore"
        exclude group: "org.apache.httpcomponents", module: "httpcore-nio"
        exclude group: "org.apache.httpcomponents", module: "httpclient"
        exclude group: "org.apache.httpcomponents", module: "httpasyncclient"
    }
    compile("org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticSearchVersion}") {
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
        exclude group: "org.elasticsearch", module: "elasticsearch"
        exclude group: "org.elasticsearch.client", module: "elasticsearch-rest-client"
        exclude group: "org.elasticsearch", module: "jna"
        exclude group: "org.locationtech.spatial4j", module: "spatial4j"
        exclude group: "com.vividsolutions", module: "jts"
    }
    compile("org.elasticsearch.client:elasticsearch-rest-client-sniffer:${elasticSearchVersion}") {
        exclude group: "commons-codec", module: "commons-codec"
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.apache.httpcomponents", module: "httpcore"
        exclude group: "org.apache.httpcomponents", module: "httpclient"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "org.elasticsearch.client", module: "elasticsearch-rest-client"
    }

    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile("junit:junit:${junitVersion}") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
    testCompile("pl.pragmatists:JUnitParams:${junitParamsVersion}") {
        exclude group: "junit", module: "junit"
    }
}

sourceSets {
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.project {
                name 'elastic-common'
                packaging 'jar'
                description 'ElasticSearch Common Module'

                url 'https://github.com/polyglotted/elastic-common'
                scm {
                    connection 'scm:git:git@github.com:polyglotted/elastic-common.git'
                    developerConnection 'scm:git:git@github.com:polyglotted/elastic-common.git'
                    url 'https://github.com/polyglotted/elastic-common'
                }
                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'vshank77'
                        name 'Shankar Vasduevan'
                        email 'shankar [at] polyglotted [dot] io'
                    }
                }
            }
        }
    }
}